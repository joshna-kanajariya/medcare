generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Hospital {
  id          Int          @id @default(autoincrement())
  name        String
  address     String?
  phone       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
}

model Department {
  id          Int          @id @default(autoincrement())
  name        String
  hospitalId  Int
  contact     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  hospital    Hospital     @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  doctors     Doctor[]
  appointments Appointment[]
}

model Patient {
  id             String        @id @default(cuid())
  hospitalId     Int?
  firstName      String
  lastName       String
  dateOfBirth    DateTime
  email          String?       @unique
  phone          String?
  gender         String?
  address        String?
  emergencyContact String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  hospital       Hospital?     @relation(fields: [hospitalId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("patients")
}

model Appointment {
  id             String             @id @default(cuid())
  patientId      String
  doctorId       String
  departmentId   Int?
  hospitalId     Int?
  scheduledFor   DateTime
  duration       Int                @default(30)
  status         AppointmentStatus  @default(SCHEDULED)
  reason         String?
  notes          String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  patient        Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor         Doctor             @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  department     Department?        @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  hospital       Hospital?          @relation(fields: [hospitalId], references: [id], onDelete: SetNull)

  @@map("appointments")
}

enum AppointmentStatus {
  SCHEDULED
  CHECKED_IN
  COMPLETED
  CANCELLED
}

model Doctor {
  id             String       @id @default(cuid())
  hospitalId     Int?
  departmentId   Int?
  firstName      String
  lastName       String
  email          String       @unique
  phone          String?
  specialization String
  licenseNumber  String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  hospital       Hospital?    @relation(fields: [hospitalId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  department     Department?  @relation(fields: [departmentId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("doctors")
}

model MedicalRecord {
  id         String   @id @default(cuid())
  patientId  String
  doctorId   String
  diagnosis  String
  treatment  String?
  notes      String?
  visitDate  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("medical_records")
}
